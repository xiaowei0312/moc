/*
 * .
 * Support: http://www.moc.cc
 * 
 */
package com.sram.controller.admin;

import javax.annotation.Resource;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.sram.Message;
import com.sram.entity.CourseChapter;
import com.sram.service.CourseChapterService;

/**
 * Controller - 课程
 * 
 * @author Sram Team
 * @version 1.0
 */
@Controller("adminCourseChapterController")
@RequestMapping("/admin/course_chapter")
public class CourseChapterController extends BaseController {
	@Resource(name = "courseChapterServiceImpl")
	private CourseChapterService courseChapterService;

	@RequestMapping(value = "/addChapter", method = RequestMethod.GET)
	public String addChapter(ModelMap model, Long courseId) {
		model.addAttribute("courseId", courseId);
		return "/admin/course_chapter/addChapter";
	}
 
	@RequestMapping(value = "/addUnit", method = RequestMethod.GET)
	public String addUnit(ModelMap model, Long courseId, Long parentId) {
		model.addAttribute("courseId", courseId);
		model.addAttribute("parent", courseChapterService.find(parentId));
		return "/admin/course_chapter/addUnit";
	}

	@RequestMapping(value = "/editChapter", method = RequestMethod.GET)
	public String editChapter(ModelMap model, Long id) {
		CourseChapter courseChapter = courseChapterService.find(id);
		model.addAttribute("courseChapter", courseChapter);
		return "/admin/course_chapter/editChapter";
	}

	@RequestMapping(value = "/editUnit", method = RequestMethod.GET)
	public String editUnit(ModelMap model, Long id) {
		CourseChapter courseChapter = courseChapterService.find(id);
		model.addAttribute("courseChapter", courseChapter);
		return "/admin/course_chapter/editUnit";
	}

	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public String update(Long id, String title, 
			RedirectAttributes redirectAttributes) {
		CourseChapter courseChapter = courseChapterService.find(id);
		courseChapter.setTitle(title);
		courseChapterService.update(courseChapter);
		addFlashMessage(redirectAttributes, SUCCESS_MESSAGE);
		return "redirect:list.jhtml?courseId="
		+ courseChapter.getCourse().getId(); 
	}
  
	/**
	 * 根据课程id---获取对应的章节，，课时
	 */
	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public String list(ModelMap model, Long courseId) {
		// 根据课程id获得对应的chapter
		model.addAttribute("chapters",
				courseChapterService.findChaptersByCourse(courseId));
		model.addAttribute("courseId", courseId);
		return "/admin/course_chapter/list";
	}

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public String save(CourseChapter courseChapter, Long parentId,
			RedirectAttributes redirectAttributes) {
		courseChapterService.save(courseChapter, parentId);
		addFlashMessage(redirectAttributes, SUCCESS_MESSAGE);
		return "redirect:list.jhtml?courseId="
				+ courseChapter.getCourse().getId();
	}


	/**
	 * 删除
	 */
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public @ResponseBody
	Message delete(Long id, String ids) {

		courseChapterService.delete(id, ids);
		return SUCCESS_MESSAGE;
	}

	/**
	 * 删除
	 */
	@RequestMapping(value = "/sort", method = RequestMethod.POST)
	public @ResponseBody
	Message sort(String ids) {

		courseChapterService.sort(ids);
		return SUCCESS_MESSAGE;
	}

	@RequestMapping(value = "/edit", method = RequestMethod.GET)
	public String edit(Long id, Long courseLessonid, ModelMap model) {
		return "/admin/course_chapter/edit";
	}
}